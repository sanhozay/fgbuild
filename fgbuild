#!/usr/bin/env bash
#
# Copyright (c) 2015, 2016, Richard Senior
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Flightgear Build
# 
# Usage: ./build [OPTIONS]
#
# Options:
# -c        cleans the build directories before building
# -d DATE   build from DATE (MMM d YYYY)
# -g        build with debug symbols
# -j N      builds with N parallel jobs
# -l        builds with address sanitizer for leak checking
# -u        update from current state of next (not compatible with -d)
# -h        show usage message
# -H        show detailed usage message
#
# Directories containing sources
export FD=$FG_SRC/fgdata
export FG=$FG_SRC/flightgear
export OS=$FG_SRC/openscenegraph
export SG=$FG_SRC/simgear
export TG=$FG_SRC/terragear
export AM=$FG_SRC/jsbsim/utils/aeromatic++

# Build directories
export FG_BUILD=$FG_SRC/build/flightgear
export OS_BUILD=$FG_SRC/build/openscenegraph
export SG_BUILD=$FG_SRC/build/simgear
export TG_BUILD=$FG_SRC/build/terragear
export AM_BUILD=$FG_SRC/build/aeromatic++

# Installation directory
export FG_INSTALL=$FG_SRC/install

# Log file for build output
export LOG=$FG_SRC/fgbuild.log

# Check whether notify-send exists
HAVE_NOTIFY=$(command -v notify-send)

################################################################################
# FUNCTIONS
################################################################################

function die() {
    echo "$(basename $0): $1"
    exit 1
}

function log() {
    echo "$(basename $0): $(date +%T): $1"
    if [[ $2 && $HAVE_NOTIFY ]]; then
        notify-send --icon $FG/icons/flightgear.ico "$1"    
    fi
}

function build() {
    if [ $DEBUG -ne 0 ]; then
        COMP_FLAGS="-O0 -g -march=native"
        LINK_FLAGS="-O0 -g"
    else
        COMP_FLAGS="-O3 -march=native"
        LINK_FLAGS="-O3"
    fi
    if [ ! -d CMakeFiles ]; then
        cmake "$1" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_FLAGS="$COMP_FLAGS" \
            -DCMAKE_CXX_FLAGS="$COMP_FLAGS" \
            -DCMAKE_EXE_LINKER_FLAGS="$LINK_FLAGS -ltcmalloc" \
            -DCMAKE_SHARED_LINKER_FLAGS="$LINK_FLAGS -ltcmalloc" \
            -DCMAKE_VERBOSE_MAKEFILE=1 \
            -DLIB_POSTFIX="" \
            -DSIMGEAR_SHARED=OFF \
            -DENABLE_SIMD=OFF \
            -DCMAKE_INSTALL_PREFIX:PATH="$FG_INSTALL" &>> "$LOG"
        check_status
    fi
    make -j$JOBS VERBOSE=1 install &>> "$LOG"
    check_status
}

function build_with_leak_checking() {
    if [ $DEBUG -ne 0 ]; then
        COMP_FLAGS="-fsanitize=address -fno-omit-frame-pointer -O2 -g -pthread"
        LINK_FLAGS="-fsanitize=address -fno-omit-frame-pointer -O2 -g"
    else
        COMP_FLAGS="-fsanitize=address -fno-omit-frame-pointer -O3 -pthread"
        LINK_FLAGS="-fsanitize=address -fno-omit-frame-pointer -O3"
    fi
    if [ ! -d CMakeFiles ]; then
        cmake "$1" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_FLAGS="$COMP_FLAGS" \
            -DCMAKE_CXX_FLAGS="$COMP_FLAGS" \
            -DCMAKE_EXE_LINKER_FLAGS="$LINK_FLAGS -ltcmalloc" \
            -DCMAKE_SHARED_LINKER_FLAGS="$LINK_FLAGS -ltcmalloc" \
            -DCMAKE_VERBOSE_MAKEFILE=1 \
            -DLIB_POSTFIX="" \
            -DSIMGEAR_SHARED=OFF \
            -DENABLE_SIMD=OFF \
            -DCMAKE_INSTALL_PREFIX:PATH="$FG_INSTALL" &>> "$LOG"
        check_status
    fi
    make -j$JOBS VERBOSE=1 install &>> "$LOG"
    check_status
}

function check_status() {
    if [ $? -ne 0 ]; then 
        log 'Build failed'
        exit $? 
    fi
}

function usage() {
    JOBS=$(lscpu | awk '/^CPU\(s\)/ {print $2}')
    echo "Usage: $(basename $0) [OPTIONS]"
    echo -e "  -c     \tclean before building"
    echo -e "  -g     \tbuild with debug symbols"
    echo -e "  -d DATE\tbuild snapshot from DATE (format YYYYMMDD)"
    echo -e "  -j N   \trun N parallel jobs (default $JOBS)"
    echo -e "  -l     \tbuild with leak checking"
    echo -e "  -u     \tupdate before building (cannot be used with -d)"
    echo -e "  -h     \tshow help"
    echo -e "  -H     \tshow detailed usage"
    echo ''
}

function detailed_usage() {
    echo 'To use this script, create an environment variable called FG_SRC'
    echo 'that points to the directory containing your flightgear and'
    echo 'simgear source folders. Add it to your .profile or .bashrc file.'
    echo ''
    echo 'For example:'
    echo 'export FG_SRC=$HOME/Flightgear'
    echo ''
    echo 'You must have write access to this directory because this build'
    echo 'script will create a build directory inside it and write a log'
    echo 'file to it during the build.'
    echo ''
    echo 'Flightgear will be built into $FG_SRC/install and the bin directory'
    echo 'therein will contain the fgfs executable. You may want to add this'
    echo 'bin directory to your path and the shared libraries to your library'
    echo 'path:'
    echo 'export PATH=$PATH:$FG_SRC/install/bin'
    echo 'export LD_LIBRARY_PATH=$FG_SRC/install/lib'
}

################################################################################
# COMMAND LINE OPTIONS
################################################################################

if [ ! $FG_SRC ]; then
    detailed_usage
    echo ''
    die 'FG_SRC is not defined, aborting'
fi

# Parse and validate command line options

CLEAN=0
DEBUG=0
LEAK_CHECK=0
JOBS=$(lscpu | awk '/^CPU\(s\)/ {print $2}')
UPDATE=0

cat /dev/null > "$LOG"

set -- $(getopt Hcghulj:d: "$@")
while [ $# -gt 0 ]
do
    case "$1" in 
        (-H) usage; detailed_usage; exit;;
        (-c) CLEAN=1;;
        (-d) shift; FDATE=$(date -d $1);;
        (-g) DEBUG=1;;
        (-h) usage; exit;;
        (-j) shift; JOBS=$1;;
        (-l) LEAK_CHECK=1;;
        (-u) UPDATE=1;;
        (--) shift; break;;
        (-*) echo "$0: error - unrecognized option"; exit 1;;
        (*)  break;;
    esac 
    shift
done

if [[ $FDATE && $UPDATE == 1 ]]; then
    die "The -u and -d options are mutually exclusive"
fi

################################################################################
# UPDATE
################################################################################

# Update from Git remote

if [ "$FDATE" ]; then 
    log "Fetching snapshot from $FDATE"
    cd $SG && git checkout $(git rev-list -1 --before="$FDATE" next) &>> "$LOG"
    check_status
    cd $FG && git checkout $(git rev-list -1 --before="$FDATE" next) &>> "$LOG"
    check_status
    cd $FD && git checkout $(git rev-list -1 --before="$FDATE" next) &>> "$LOG"
    check_status
elif [ $UPDATE -ne 0 ]; then
    log "Updating from remote"
    cd $SG && git checkout next &>> "$LOG" && git pull &>> "$LOG"
    check_status
    cd $FG && git checkout next &>> "$LOG" && git pull &>> "$LOG"
    check_status
    cd $FD && git checkout next &>> "$LOG" && git pull &>> "$LOG"
    check_status
    cd $AM && git checkout master &>> "$LOG" && git pull &>> "$LOG"
    check_status
fi

################################################################################
# CLEAN
################################################################################

# Only clean flightgear and simgear directories. If OSG, Aeromatic++ or
# Terragear need rebuilding, the build directory must be deleted manually

if [ $CLEAN -ne 0 ]; then
    log "Cleaning build directories"
    rm -rf $SG_BUILD $FG_BUILD
fi

################################################################################
# BUILD
################################################################################

# Recreate the build directories if necessary
mkdir -p $FG_BUILD
mkdir -p $SG_BUILD

# Build openscenegraph if the source directory exists and not the build
if [ -d $OS -a ! -d $OS_BUILD ]; then
    mkdir -p $OS_BUILD
    cd $OS_BUILD
    log 'Building openscenegraph' NOTIFY
    build "$OS"
fi

# Build terragear if the source directory exists and not the build
if [ -d $TG -a ! -d $TG_BUILD ]; then
    mkdir -p $TG_BUILD
    cd $TG_BUILD
    log 'Building terragear' NOTIFY
    build "$TG"
fi

# Build Aeromatic++ if the source directory exists and not the build
if [ -d $AM -a ! -d $AM_BUILD ]; then
    mkdir -p $AM_BUILD
    cd $AM_BUILD
    log 'Building aeromatic++' NOTIFY
    build "$AM"
fi

# Build simgear
cd $SG_BUILD
if [ $LEAK_CHECK -eq 0 ]; then
    log 'Building simgear' NOTIFY
    build "$SG"
else
    log 'Building simgear with leak checking' NOTIFY
    build_with_leak_checking "$SG"
fi

# Build flightgear
cd $FG_BUILD
if [ $LEAK_CHECK -eq 0 ]; then
    log 'Building flightgear' NOTIFY
    build "$FG"
else
    log 'Building flightgear with leak checking' NOTIFY
    build_with_leak_checking "$FG"
fi

log "Build complete" NOTIFY
